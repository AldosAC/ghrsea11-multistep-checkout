class SignUpView extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      name: '',
      email: '',
      password: ''
    };
    this.onChangeHandler = this.onChangeHandler.bind(this);
    this.onSubmitHandler = this.onSubmitHandler.bind(this);
    this.resetState = this.resetState.bind(this);
  }

  onChangeHandler(event) {
    let {
      name,
      value
    } = event.target;
    this.setState({
      [name]: value
    });
  }

  onSubmitHandler(event) {
    let {
      toNext,
      submitData
    } = this.props;
    let submitPath = '/order/signup';
    event.preventDefault();
    submitData(this.state, submitPath);
    this.resetState();
    toNext();
  }

  resetState() {
    this.setState({
      name: '',
      email: '',
      password: ''
    });
  }

  render() {
    let {
      name,
      email,
      password
    } = this.state;
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h3", null, "Sign Up"), /*#__PURE__*/React.createElement("form", {
      onSubmit: this.onSubmitHandler
    }, /*#__PURE__*/React.createElement("label", null, "Name"), /*#__PURE__*/React.createElement("input", {
      type: "text",
      name: "name",
      onChange: this.onChangeHandler,
      value: name
    }), /*#__PURE__*/React.createElement("label", null, "Email"), /*#__PURE__*/React.createElement("input", {
      type: "email",
      name: "email",
      onChange: this.onChangeHandler,
      value: email
    }), /*#__PURE__*/React.createElement("label", null, "Password"), /*#__PURE__*/React.createElement("input", {
      type: "password",
      name: "password",
      onChange: this.onChangeHandler,
      value: password
    }), /*#__PURE__*/React.createElement("button", null, "Next")));
  }

}

class ShippingView extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      line1: '',
      line2: '',
      city: '',
      state: '',
      zip: ''
    };
    this.onChangeHandler = this.onChangeHandler.bind(this);
    this.onSubmitHandler = this.onSubmitHandler.bind(this);
    this.resetState = this.resetState.bind(this);
  }

  onChangeHandler(event) {
    let {
      name,
      value
    } = event.target;
    this.setState({
      [name]: value
    });
  }

  onSubmitHandler(event) {
    let {
      toNext,
      submitData
    } = this.props;
    let submitPath = '/order/shipping';
    event.preventDefault();
    submitData(this.state, submitPath);
    this.resetState();
    toNext();
  }

  resetState() {
    this.setState({
      line1: '',
      line2: '',
      city: '',
      state: '',
      zip: ''
    });
  }

  render() {
    let {
      line1,
      line2,
      city,
      state,
      zip
    } = this.state;
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h3", null, "Shipping Information"), /*#__PURE__*/React.createElement("form", {
      onSubmit: this.onSubmitHandler
    }, /*#__PURE__*/React.createElement("label", null, "Address"), /*#__PURE__*/React.createElement("input", {
      type: "text",
      name: "line1",
      value: line1,
      onChange: this.onChangeHandler,
      placeholder: "Address Line 1"
    }), /*#__PURE__*/React.createElement("input", {
      type: "text",
      name: "line2",
      value: line2,
      onChange: this.onChangeHandler,
      placeholder: "Address Line 2"
    }), /*#__PURE__*/React.createElement("input", {
      type: "text",
      name: "city",
      value: city,
      onChange: this.onChangeHandler,
      placeholder: "City"
    }), /*#__PURE__*/React.createElement("input", {
      type: "text",
      name: "state",
      value: state,
      onChange: this.onChangeHandler,
      placeholder: "State"
    }), /*#__PURE__*/React.createElement("input", {
      type: "text",
      name: "zip",
      value: zip,
      onChange: this.onChangeHandler,
      placeholder: "Zip Code"
    }), /*#__PURE__*/React.createElement("button", null, "Next")));
  }

}

class BillingView extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      cardNum: '',
      expiration: '',
      cvv: '',
      zip: ''
    };
    this.onChangeHandler = this.onChangeHandler.bind(this);
    this.onSubmitHandler = this.onSubmitHandler.bind(this);
    this.resetState = this.resetState.bind(this);
  }

  onChangeHandler(event) {
    let {
      name,
      value
    } = event.target;
    this.setState({
      [name]: value
    });
  }

  onSubmitHandler(event) {
    let {
      toNext,
      submitData
    } = this.props;
    let submitPath = '/order/shipping';
    event.preventDefault();
    submitData(this.state, submitPath);
    this.resetState();
    toNext();
  }

  resetState() {
    this.setState({
      cardNum: '',
      expiration: '',
      cvv: '',
      zip: ''
    });
  }

  render() {
    let {
      cardNum,
      expiration,
      cvv,
      zip
    } = this.state;
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h3", null, "Shipping Information"), /*#__PURE__*/React.createElement("form", {
      onSubmit: this.onSubmitHandler
    }, /*#__PURE__*/React.createElement("label", null, "Address"), /*#__PURE__*/React.createElement("input", {
      type: "text",
      name: "line1",
      value: line1,
      onChange: this.onChangeHandler,
      placeholder: "Address Line 1"
    }), /*#__PURE__*/React.createElement("button", null, "Next")));
  }

}

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      view: "index"
    };
    this.toSignUpView = this.toSignUpView.bind(this);
    this.toShippingView = this.toShippingView.bind(this);
    this.toBillingView = this.toBillingView.bind(this);
    this.completeOrder = this.completeOrder.bind(this);
  }

  toSignUpView(event) {
    this.setState({
      view: "sign-up"
    });
  }

  toShippingView(event) {
    this.setState({
      view: "shipping"
    });
  }

  toBillingView(event) {
    this.setState({
      view: "billing"
    });
  }

  completeOrder(event) {
    this.setState({
      view: "index"
    });
  }

  submitData(data, path) {
    console.log(`Submit ${JSON.stringify(data)} to ${path}`);
  }

  renderView() {
    let {
      view
    } = this.state;

    if (view === "index") {
      return /*#__PURE__*/React.createElement("button", {
        onClick: this.toSignUpView
      }, "Checkout");
    } else if (view === "sign-up") {
      return /*#__PURE__*/React.createElement(SignUpView, {
        toNext: this.toShippingView,
        submitData: this.submitData
      });
    } else if (view === "shipping") {
      return /*#__PURE__*/React.createElement(ShippingView, {
        toNext: this.toBillingView,
        submitData: this.submitData
      });
    } else if (view === "billing") {
      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h1", null, "Billing Information"), /*#__PURE__*/React.createElement("button", {
        onClick: this.completeOrder
      }, "Place Order"));
    }
  }

  render() {
    return this.renderView();
  }

}

;
ReactDOM.render( /*#__PURE__*/React.createElement(App, null), document.getElementById("app"));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,